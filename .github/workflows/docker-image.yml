name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Run workflow on pushes to the main branch. Adjust if necessary.
  pull_request:
    branches:
      - main  # Run workflow on PRs targeting the main branch for pre-merge checks.

env:
  IMAGE_NAME: dhananjaylakkawar/bgrm-1  # Define Docker image name

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set Up Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'  # Change as per your project requirements
        
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pytest-cov
          pip install pytest
          pip install -r requirements.txt
          
      # - name: Run Unit Tests
      #   run: |
      #     pytest --junitxml=reports/results.xml --cov=bgrm-1
      #   continue-on-error: false  # Fail the workflow if tests fail

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test  # Ensure tests pass before building
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Log In to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Tag Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest -f Dockerfile .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}
      
      - name: Push Docker Image to Docker Hub
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build  # Ensure the Docker image is built and pushed before deploying
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy Application to EC2
        env:
          IMAGE_NAME: $IMAGE_NAME
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Pull the latest Docker image
            sudo docker pull $IMAGE_NAME:latest
               
            # Stop and remove the existing container if running
            sudo docker ps -q --filter "name=bgrm-1" | grep -q . && docker stop bgrm-1 && docker rm bgrm-1 || true


            # Run the new container
            sudo docker run -d --name bgrm-1 -p 80:5100 $IMAGE_NAME:latest
          EOF

      - name: Confirm Successful Deployment
        run: |
          curl --fail http://${{ secrets.EC2_HOST }} || echo "Deployment check failed"
                                                                                     
